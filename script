Sub nyUnderVersion()

Call createVersion(ActiveDocument.CustomDocumentProperties("Huvudversion"), ActiveDocument.CustomDocumentProperties("Underversion") + 1)

End Sub
Sub nyHuvudVersion()

Call createVersion(ActiveDocument.CustomDocumentProperties("Huvudversion") + 1, 0)

End Sub

Sub createVersion(mainVersion, subVersion)

' Get description for the update. Abort export if no description is given (or cancel button is pressed).
Description = InputBox("En pdf- och låst Word-export kommer att göras för version " & mainVersion & "." & subVersion & ". Beskriv kortfattat uppdateringar som gjorts för denna version.", "Spara ny version")
If cancelled(Description) = "" Then
    End
End If

' Update all document properties related to versions.
ActiveDocument.CustomDocumentProperties("Huvudversion").Value = mainVersion
ActiveDocument.CustomDocumentProperties("Underversion").Value = subVersion
ActiveDocument.CustomDocumentProperties("VisadUnderversion").Value = subVersion
ActiveDocument.Fields.Update

' Update the version history. This requires a bookmark defined in the template.
If ActiveDocument.Bookmarks.Exists("Versionshistorik") = True Then
    Set myRange = ActiveDocument.GoTo(Word.wdGoToBookmark, , , "Versionshistorik")
    myRange.SetRange myRange.Start, myRange.End - 1
    myRange.InsertParagraphAfter
    myRange.InsertAfter "Version " & mainVersion & "." & subVersion & " (" & Format(Date, "yyyy-mm-dd") & "): " & Description
End If
ActiveDocument.Save

' Build names for export
OriginalFullName = ActiveDocument.FullName
OriginalName = ActiveDocument.Name
If InStrRev(OriginalName, ".") <> 0 Then
    TruncatedName = Left(OriginalName, InStrRev(OriginalName, ".") - 1)
Else
    TruncatedName = OriginalName
End If
VersionAppendix = " (version " & mainVersion & "." & subVersion & ")"

' Use special export folder, if set. Code taken from https://stackoverflow.com/questions/29204801/test-whether-a-property-name-exists
DocumentPath = ActiveDocument.Path & "\"
If propertyExists("Exportkatalog") And ActiveDocument.CustomDocumentProperties("Exportkatalog").Value <> "" Then
    ExportPath = DocumentPath & ActiveDocument.CustomDocumentProperties("Exportkatalog").Value & "\"
Else
    ExportPath = DocumentPath & TruncatedName & "\"
End If

' Create a new folder for exports, if it doesn't already exist.
If Len(Dir(ExportPath, vbDirectory)) = 0 Then
    MkDir (ExportPath)
End If

' Export a pdf.
ActiveDocument.ExportAsFixedFormat ExportPath & TruncatedName & VersionAppendix & ".pdf", Word.WdExportFormat.wdExportFormatPDF

' Export a Word document where only commenting is allowed. This is done by saving as,
' and then opening the original document.
ActiveDocument.SaveAs2 ExportPath & TruncatedName & VersionAppendix & ".docx", Word.wdFormatDocumentDefault, True, , False
Documents.Open (OriginalFullName)

' Set the showed version to e.g. "1.5+", to indicate that the document now continues from 1.5.
ActiveDocument.CustomDocumentProperties("VisadUnderversion").Value = subVersion & "+"
ActiveDocument.Fields.Update
ActiveDocument.Save

End Sub

Sub bytExportkatalog()

' Set an export folder if not already set.
If Not propertyExists("Exportkatalog") Then
    ActiveDocument.CustomDocumentProperties.Add Name:="Exportkatalog", LinkToContent:=False, Value:="", Type:=msoPropertyTypeString
End If

' Get name for export folder
ExportFolder = InputBox("Ange namn på underkatalog för exporter. Lämna tomt för att använda dokumentets filnamn.", "", ActiveDocument.CustomDocumentProperties("Exportkatalog").Value)

If Not cancelled(ExportFolder) Then
    ActiveDocument.CustomDocumentProperties("Exportkatalog").Value = ExportFolder
End If
End Sub

Function propertyExists(propertyName)
' Returns True if the given property exists in the active, otherwise False.
' Code inspired by https://stackoverflow.com/questions/29204801/test-whether-a-property-name-exists

propertyExists = False
For Each prop In ActiveDocument.CustomDocumentProperties
    If prop.Name = propertyName Then
            propertyExists = True
        Exit For
    End If
Next prop

End Function

Function cancelled(inputResponse)
' Detects whether an input box was cancelled (compared to a zero-length response).

If StrPtr(inputResponse) = 0 Then
    cancelled = True
Else
    cancelled = False
End If
End Function
